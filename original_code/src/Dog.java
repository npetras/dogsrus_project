import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * To support an individual dog
 *
 * @author Chris Loftus
 * @version 1.1 (26th February 2018)
 */
public class Dog
{

    private ArrayList<Owner> originalOwners;
    private boolean likesBones;
    private String dogName;
    private String favFood;
    private int foodPerDay;

    /**
     * Default constructor
     */
    public Dog()
    {
        this("unknown", false, "unknown", 1);
    }

    /**
     * Constructor for the dog
     *
     * @param name        The dog's name
     * @param likeBones   Does the dog like bones?
     * @param food        The kind of food it eats
     * @param mealsPerDay Number of feeds per day
     */
    public Dog(String name, boolean likeBones, String food,
               int mealsPerDay)
    {
        dogName = name;
        originalOwners = new ArrayList<Owner>();

        this.likesBones = likeBones;
        this.favFood = food;
        this.foodPerDay = mealsPerDay;
    }

    public String getName()
    {
        return dogName;
    }

    public void setName(String newName)
    {
        dogName = newName;
    }

    /**
     * Returns a copy of the original owners
     *
     * @return A copy of the original owners as an array
     */
    public Owner[] getOriginalOwners()
    {
        Owner[] result = new Owner[originalOwners.size()];
        result = originalOwners.toArray(result);
        return result;
    }

    /**
     * To add an original owner
     *
     * @param o An original owner
     */
    public void addOriginalOwner(Owner o)
    {
        originalOwners.add(o);
    }

    /**
     * Does the dog like bones?
     *
     * @return true if he does
     */
    public boolean getLikesBones()
    {
        return likesBones;
    }

    /**
     * How many times a day to feed the dog
     *
     * @param feeds The number of feeds per day
     */
    public void setFeedsPerDay(int feeds)
    {
        foodPerDay = feeds;
    }

    /**
     * The number of feeds per day the dog is fed
     *
     * @return The number of feeds per day
     */
    public int getFeedsPerDay()
    {
        return foodPerDay;
    }

    /**
     * What's his favourite food?
     *
     * @param food The food he likes
     */
    public void setFavouriteFood(String food)
    {
        favFood = food;
    }

    /**
     * The food the dog likes to eat
     *
     * @return The food
     */
    public String getFavouriteFood()
    {
        return favFood;
    }

    /**
     * Reads in information about the dog from the file
     */
    public void load(Scanner infile)
    {

        dogName = infile.next();
        int numOwners = infile.nextInt();
        originalOwners = new ArrayList<>();
        for (int oCount = 0; oCount < numOwners; oCount++)
        {
            String name = infile.next();
            String phone = infile.next();
            Owner owner = new Owner(name, phone);
            originalOwners.add(owner);
        }
        likesBones = infile.nextBoolean();
        foodPerDay = infile.nextInt();
        favFood = infile.next();
    }

    public void save(PrintWriter pw)
    {
        pw.println(dogName);
        pw.println(originalOwners.size());
        for (Owner o : originalOwners)
        {
            pw.println(o.getName());
            pw.println(o.getPhone());
        }
        pw.println(likesBones);
        pw.println(foodPerDay);
        pw.println(favFood);
    }

    /**
     * Note that this only compares equality based on a
     * dog's name.
     *
     * @param obj the other dog to compare against.
     */
    @Override
    public boolean equals(Object obj)
    { // Generated by IDE to be more robust
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Dog other = (Dog) obj;
        if (dogName == null)
        {
            if (other.dogName != null)
                return false;
        } else if (!dogName.equals(other.dogName))
            return false;
        return true;
    }

    /**
     * A basic implementation to just return all the data in string form
     */
    public String toString()
    {
        return "Dog name: " + dogName + "\nLikes Bones?: " + likesBones
                + "\nOriginal Owner: " + originalOwners + "\nFavfood: " + favFood
                + "\nFoodPerDay: " + foodPerDay + '\n';
    }

}
